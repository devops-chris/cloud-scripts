#!/bin/zsh

# Function to display script usage
showHelp() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  --set         Set a new secret in a Key Vault"
    echo "  --set-from-file Set a new secret from a file in a Key Vault"
    echo "  --delete      Delete a secret from a Key Vault"
    echo "  -h, --help    Show this help message"
}

# Check if the script was called with the help option
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    showHelp
    return
fi

# Get a secret value from a specific Key Vault
getSecretValue() {
    local vaultName="$1"
    local secretName="$2"
    az keyvault secret show --vault-name $vaultName --name $secretName --query "value" --output tsv 2>/dev/null
}

# Set a secret in a specific Key Vault
setSecret() {
    local vaultName="$1"
    local secretName="$2"
    local secretValue="$3"
    az keyvault secret set --vault-name $vaultName --name $secretName --value "$secretValue" >/dev/null
}

# Set a secret in a specific Key Vault from a file
setSecretFromFile() {
    local vaultName="$1"
    local secretName="$2"
    local filePath="$3"
    local secretValue=$(<"$filePath")
    az keyvault secret set --vault-name $vaultName --name $secretName --value "$secretValue" >/dev/null
}

# Delete a secret from a specific Key Vault
deleteSecret() {
    local vaultName="$1"
    local secretName="$2"
    az keyvault secret delete --vault-name $vaultName --name $secretName >/dev/null
}

# List Key Vaults that the user has access to
keyVaults=("${(@f)$(az keyvault list --query '[].name' --output tsv)}")

if [ -z "$keyVaults" ]; then
    echo "No Key Vaults accessible."
    return 1
fi

# Check if the script was called with the '--set', '--set-from-file', or '--delete' flag
if [[ "$1" == "--set" ]]; then
    # Prompt for Key Vault selection
    echo "Select a Key Vault to set the secret:"
    selectedVault=$(printf "%s\n" "${(@)keyVaults}" | fzf --tac)
    
    if [ -n "$selectedVault" ]; then
        # Prompt for secret name
        echo "Enter secret name:"
        read secretName

        # Prompt for secret value (without echoing to the terminal)
        echo "Enter secret value:"
        read -s secretValue
        echo

        # Prompt for secret value confirmation
        echo "Confirm secret value:"
        read -s confirmValue
        echo

        # Check if the entered values match
        if [ "$secretValue" != "$confirmValue" ]; then
            echo "Error: Entered values do not match. Secret not set."
            return 1
        fi

        # Set the secret
        setSecret $selectedVault $secretName "$secretValue"
        echo "Secret '$secretName' set in '$selectedVault'."
    else
        echo "No Key Vault selected. Exiting."
        return 1
    fi
elif [[ "$1" == "--set-from-file" ]]; then
    # Prompt for Key Vault selection
    echo "Select a Key Vault to set the secret from a file:"
    selectedVault=$(printf "%s\n" "${(@)keyVaults}" | fzf --tac)
    
    if [ -n "$selectedVault" ]; then
        # Prompt for secret name
        echo "Enter secret name:"
        read secretName

        # Prompt for file path
        echo "Enter path to the file containing the secret value:"
        read filePath

        # Check if the file exists
        if [ -f "$filePath" ]; then
            # Set the secret from file
            setSecretFromFile $selectedVault $secretName "$filePath"
            echo "Secret '$secretName' set in '$selectedVault' from file."
        else
            echo "Error: File not found. Secret not set."
            return 1
        fi
    else
        echo "No Key Vault selected. Exiting."
        return 1
    fi
elif [[ "$1" == "--delete" ]]; then
    # List all accessible secrets in the format <vault>: <key>
    accessibleSecrets=()
    for vault in "${keyVaults[@]}"; do
        secrets=("${(@f)$(az keyvault secret list --vault-name $vault --query '[].name' --output tsv 2>/dev/null)}")
        if [ -n "$secrets" ]; then
            for secret in "${secrets[@]}"; do
                accessibleSecrets+=("$vault: $secret")
            done
        fi
    done

    if [ -z "$accessibleSecrets" ]; then
        echo "No accessible secrets found."
        return 1
    fi

else
    # Default behavior for just 'azv' without additional arguments
    # Store accessible secrets in an array
    accessibleSecrets=()

    # Iterate through all Key Vaults and list accessible secrets
    for vault in "${keyVaults[@]}"; do
        secrets=("${(@f)$(az keyvault secret list --vault-name $vault --query '[].name' --output tsv 2>/dev/null)}")
        if [ -n "$secrets" ]; then
            for secret in "${secrets[@]}"; do
                accessibleSecrets+=("$vault: $secret")
            done
        fi
    done

    if [ -z "$accessibleSecrets" ]; then
        echo "No accessible secrets found."
        exit 1
    fi

    # Use fzf for interactive selection
    selected=$(printf "%s\n" "${(@)accessibleSecrets}" | fzf --tac)

    if [ -n "$selected" ]; then
        # Extract vault and secret names
        vaultName=${selected%%:*}
        secretName=${selected#*: }

        # Get and display the selected secret value
        value=$(getSecretValue $vaultName $secretName)
        if [ -n "$value" ]; then
            echo "$value"
        else
            echo "Error retrieving secret value for '$secretName' in '$vaultName'."
        fi
    else
        echo "No secret selected."
    fi
fi